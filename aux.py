from flask import make_response, jsonify

def responder(msg, status):
    """Format a JSON response."""
    return make_response(jsonify({'message': msg,
                                  'status': status}), status)


def get_config(setting):
    """Retrive archive storage path from settings file."""
    import configparser

    config = configparser.ConfigParser()
    config.read('settings.cnf')

    return str(config['environment'][setting])


def user_info(session_id):
    """Retrieve authorizer and enterer numbers based on browser cookie."""
    import MySQLdb

    db = MySQLdb.connect(read_default_file='./settings.cnf')

    cursor = db.cursor()
    sql = """SELECT authorizer_no, enterer_no
             from session_data
             where session_id = '{0:s}'
          """.format(session_id)

    cursor.execute(sql)

    for authorizer_no, enterer_no in cursor:
        auth = authorizer_no
        ent = enterer_no

    return auth, ent


def delete_archive():
    """Permanently remove a dataset from the system."""
    # delte from table
    # delete from file system
    
    pass

def archive_names():
    """Return a hash of DOIs and actual filenames."""
    import MySQLdb

    db = MySQLdb.connect(read_default_file='./settings.cnf')

    cursor = db.cursor()
    sql = """SELECT doi, filename
             FROM data_archives;
          """
    cursor.execute(sql)

    doi_map = dict()
    for doi, filename in cursor:
        doi_map[doi.lower()] = filename

    return doi_map


def archive_summary():
    """Load archive information from database."""
    import MySQLdb

    db = MySQLdb.connect(read_default_file='./settings.cnf')

    cursor = db.cursor()
    sql = """SELECT title, doi, username, creation_date, description, uri
             FROM data_archives;
          """
    cursor.execute(sql)

    archives = list()
    for title, doi, username, creation_date, description, uri in cursor:
        archives.append({'title': title,
                         'doi': doi,
                         'username': username,
                         'creation_date': creation_date,
                         'description': description,
                         'uri': uri})

    db.close()

    return jsonify(archives)


def get_archive_no(ent):
    """Determine the last incremented number generated by the active user."""
    import MySQLdb

    db = MySQLdb.connect(read_default_file='./settings.cnf')

    cursor = db.cursor()
    sql = """SELECT title, doi, username, creation_date, description, uri
             FROM data_archives;
          """
    sql = """SELECT archive_no
             FROM data_archives
             WHERE enterer_no = '{0:d}'
             ORDER BY created DESC
             LIMIT 1;
          """.format(ent)

    cursor.execute(sql)

    for archive_no in cursor:
        filename = archive_no

    db.close()

    return filename


def create_record(auth, ent, authors, title, desc, path, args):
    """Create new record in database."""
    import MySQLdb

    db = MySQLdb.connect(read_default_file='./settings.cnf')

    cursor = db.cursor()
    sql = """INSERT INTO data_archives
             (authorizer_no, enterer_no, authors, title, description,
              uri_path, uri_args)
             VALUES ('{0:d}', '{1:d}', '{2:s}, {3:s}, {4:s}, {5:s}, {6:s}');
          """.format(auth, ent, authors, title, desc, path, args)
             
    try:
        cursor.execute(sql)
        db.commit()
    except Exception as e:
        db.rollback()

    db.close()


def update_record(archive_no, title, desc, doi):
    """Add metadata to the archive table in database."""
    import MySQLdb

    db = MySQLdb.connect(read_default_file='./settings.cnf')
    cursor = db.cursor()

    if title:
        title = title[:100]
        sql = """UPDATE data_archives
                 SET title = '{0:s}'
                 WHERE archive_no = {1:d};
              """.format(title, archive_no)
        cursor.execute(sql)

    if desc:
        desc = desc[:5000]
        sql = """UPDATE data_archives
                 SET description = '{0:s}'
                 WHERE archive_no = {1:d};
              """.format(desc, archive_no)
        cursor.execute(sql)

    if doi:
        doi = doi[:100]
        sql = """UPDATE data_archives
                 SET doi = '{0:s}'
                 WHERE archive_no = {1:d};
              """.format(doi, archive_no)
        cursor.execute(sql)

    db.commit()
    db.close()
